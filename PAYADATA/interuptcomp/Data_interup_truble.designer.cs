#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PAYADATA.interuptcomp
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="payazobnet")]
	public partial class Data_interup_trubleDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertttruble_shooting(ttruble_shooting instance);
    partial void Updatettruble_shooting(ttruble_shooting instance);
    partial void Deletettruble_shooting(ttruble_shooting instance);
    partial void Inserttsolutionfortruble(tsolutionfortruble instance);
    partial void Updatetsolutionfortruble(tsolutionfortruble instance);
    partial void Deletetsolutionfortruble(tsolutionfortruble instance);
    partial void Insertmselectedtrubleshooting(mselectedtrubleshooting instance);
    partial void Updatemselectedtrubleshooting(mselectedtrubleshooting instance);
    partial void Deletemselectedtrubleshooting(mselectedtrubleshooting instance);
    #endregion
		
		public Data_interup_trubleDataContext() : 
				base(global::PAYADATA.Properties.Settings.Default.payazobnetConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public Data_interup_trubleDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Data_interup_trubleDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Data_interup_trubleDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Data_interup_trubleDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ttruble_shooting> ttruble_shootings
		{
			get
			{
				return this.GetTable<ttruble_shooting>();
			}
		}
		
		public System.Data.Linq.Table<tsolutionfortruble> tsolutionfortrubles
		{
			get
			{
				return this.GetTable<tsolutionfortruble>();
			}
		}
		
		public System.Data.Linq.Table<mselectedtrubleshooting> mselectedtrubleshootings
		{
			get
			{
				return this.GetTable<mselectedtrubleshooting>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ttruble_shooting")]
	public partial class ttruble_shooting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _xid;
		
		private string _xtruble;
		
		private string _xcod;
		
		private EntityRef<ttruble_shooting> _ttruble_shooting2;
		
		private EntityRef<ttruble_shooting> _ttruble_shooting1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnxidChanging(int value);
    partial void OnxidChanged();
    partial void OnxtrubleChanging(string value);
    partial void OnxtrubleChanged();
    partial void OnxcodChanging(string value);
    partial void OnxcodChanged();
    #endregion
		
		public ttruble_shooting()
		{
			this._ttruble_shooting2 = default(EntityRef<ttruble_shooting>);
			this._ttruble_shooting1 = default(EntityRef<ttruble_shooting>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_xid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int xid
		{
			get
			{
				return this._xid;
			}
			set
			{
				if ((this._xid != value))
				{
					if (this._ttruble_shooting1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnxidChanging(value);
					this.SendPropertyChanging();
					this._xid = value;
					this.SendPropertyChanged("xid");
					this.OnxidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_xtruble", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string xtruble
		{
			get
			{
				return this._xtruble;
			}
			set
			{
				if ((this._xtruble != value))
				{
					this.OnxtrubleChanging(value);
					this.SendPropertyChanging();
					this._xtruble = value;
					this.SendPropertyChanged("xtruble");
					this.OnxtrubleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_xcod", DbType="NChar(7) NOT NULL", CanBeNull=false)]
		public string xcod
		{
			get
			{
				return this._xcod;
			}
			set
			{
				if ((this._xcod != value))
				{
					this.OnxcodChanging(value);
					this.SendPropertyChanging();
					this._xcod = value;
					this.SendPropertyChanged("xcod");
					this.OnxcodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ttruble_shooting_ttruble_shooting", Storage="_ttruble_shooting2", ThisKey="xid", OtherKey="xid", IsUnique=true, IsForeignKey=false)]
		public ttruble_shooting ttruble_shooting2
		{
			get
			{
				return this._ttruble_shooting2.Entity;
			}
			set
			{
				ttruble_shooting previousValue = this._ttruble_shooting2.Entity;
				if (((previousValue != value) 
							|| (this._ttruble_shooting2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ttruble_shooting2.Entity = null;
						previousValue.ttruble_shooting1 = null;
					}
					this._ttruble_shooting2.Entity = value;
					if ((value != null))
					{
						value.ttruble_shooting1 = this;
					}
					this.SendPropertyChanged("ttruble_shooting2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ttruble_shooting_ttruble_shooting", Storage="_ttruble_shooting1", ThisKey="xid", OtherKey="xid", IsForeignKey=true)]
		public ttruble_shooting ttruble_shooting1
		{
			get
			{
				return this._ttruble_shooting1.Entity;
			}
			set
			{
				ttruble_shooting previousValue = this._ttruble_shooting1.Entity;
				if (((previousValue != value) 
							|| (this._ttruble_shooting1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ttruble_shooting1.Entity = null;
						previousValue.ttruble_shooting2 = null;
					}
					this._ttruble_shooting1.Entity = value;
					if ((value != null))
					{
						value.ttruble_shooting2 = this;
						this._xid = value.xid;
					}
					else
					{
						this._xid = default(int);
					}
					this.SendPropertyChanged("ttruble_shooting1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tsolutionfortruble")]
	public partial class tsolutionfortruble : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _xid;
		
		private string _xcause;
		
		private string _xsolution;
		
		private string _xcod;
		
		private string _xcodtruble;
		
		private EntityRef<tsolutionfortruble> _tsolutionfortruble2;
		
		private EntityRef<tsolutionfortruble> _tsolutionfortruble1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnxidChanging(int value);
    partial void OnxidChanged();
    partial void OnxcauseChanging(string value);
    partial void OnxcauseChanged();
    partial void OnxsolutionChanging(string value);
    partial void OnxsolutionChanged();
    partial void OnxcodChanging(string value);
    partial void OnxcodChanged();
    partial void OnxcodtrubleChanging(string value);
    partial void OnxcodtrubleChanged();
    #endregion
		
		public tsolutionfortruble()
		{
			this._tsolutionfortruble2 = default(EntityRef<tsolutionfortruble>);
			this._tsolutionfortruble1 = default(EntityRef<tsolutionfortruble>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_xid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int xid
		{
			get
			{
				return this._xid;
			}
			set
			{
				if ((this._xid != value))
				{
					if (this._tsolutionfortruble1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnxidChanging(value);
					this.SendPropertyChanging();
					this._xid = value;
					this.SendPropertyChanged("xid");
					this.OnxidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_xcause", DbType="NVarChar(MAX)")]
		public string xcause
		{
			get
			{
				return this._xcause;
			}
			set
			{
				if ((this._xcause != value))
				{
					this.OnxcauseChanging(value);
					this.SendPropertyChanging();
					this._xcause = value;
					this.SendPropertyChanged("xcause");
					this.OnxcauseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_xsolution", DbType="NVarChar(MAX)")]
		public string xsolution
		{
			get
			{
				return this._xsolution;
			}
			set
			{
				if ((this._xsolution != value))
				{
					this.OnxsolutionChanging(value);
					this.SendPropertyChanging();
					this._xsolution = value;
					this.SendPropertyChanged("xsolution");
					this.OnxsolutionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_xcod", DbType="NChar(12) NOT NULL", CanBeNull=false)]
		public string xcod
		{
			get
			{
				return this._xcod;
			}
			set
			{
				if ((this._xcod != value))
				{
					this.OnxcodChanging(value);
					this.SendPropertyChanging();
					this._xcod = value;
					this.SendPropertyChanged("xcod");
					this.OnxcodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_xcodtruble", DbType="NChar(7) NOT NULL", CanBeNull=false)]
		public string xcodtruble
		{
			get
			{
				return this._xcodtruble;
			}
			set
			{
				if ((this._xcodtruble != value))
				{
					this.OnxcodtrubleChanging(value);
					this.SendPropertyChanging();
					this._xcodtruble = value;
					this.SendPropertyChanged("xcodtruble");
					this.OnxcodtrubleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tsolutionfortruble_tsolutionfortruble", Storage="_tsolutionfortruble2", ThisKey="xid", OtherKey="xid", IsUnique=true, IsForeignKey=false)]
		public tsolutionfortruble tsolutionfortruble2
		{
			get
			{
				return this._tsolutionfortruble2.Entity;
			}
			set
			{
				tsolutionfortruble previousValue = this._tsolutionfortruble2.Entity;
				if (((previousValue != value) 
							|| (this._tsolutionfortruble2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tsolutionfortruble2.Entity = null;
						previousValue.tsolutionfortruble1 = null;
					}
					this._tsolutionfortruble2.Entity = value;
					if ((value != null))
					{
						value.tsolutionfortruble1 = this;
					}
					this.SendPropertyChanged("tsolutionfortruble2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tsolutionfortruble_tsolutionfortruble", Storage="_tsolutionfortruble1", ThisKey="xid", OtherKey="xid", IsForeignKey=true)]
		public tsolutionfortruble tsolutionfortruble1
		{
			get
			{
				return this._tsolutionfortruble1.Entity;
			}
			set
			{
				tsolutionfortruble previousValue = this._tsolutionfortruble1.Entity;
				if (((previousValue != value) 
							|| (this._tsolutionfortruble1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tsolutionfortruble1.Entity = null;
						previousValue.tsolutionfortruble2 = null;
					}
					this._tsolutionfortruble1.Entity = value;
					if ((value != null))
					{
						value.tsolutionfortruble2 = this;
						this._xid = value.xid;
					}
					else
					{
						this._xid = default(int);
					}
					this.SendPropertyChanged("tsolutionfortruble1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.mselectedtrubleshooting")]
	public partial class mselectedtrubleshooting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _xid;
		
		private System.Nullable<int> _xidofparent;
		
		private string _xtypeofparant;
		
		private System.Nullable<int> _xidtruble;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnxidChanging(int value);
    partial void OnxidChanged();
    partial void OnxidofparentChanging(System.Nullable<int> value);
    partial void OnxidofparentChanged();
    partial void OnxtypeofparantChanging(string value);
    partial void OnxtypeofparantChanged();
    partial void OnxidtrubleChanging(System.Nullable<int> value);
    partial void OnxidtrubleChanged();
    #endregion
		
		public mselectedtrubleshooting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_xid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int xid
		{
			get
			{
				return this._xid;
			}
			set
			{
				if ((this._xid != value))
				{
					this.OnxidChanging(value);
					this.SendPropertyChanging();
					this._xid = value;
					this.SendPropertyChanged("xid");
					this.OnxidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_xidofparent", DbType="Int")]
		public System.Nullable<int> xidofparent
		{
			get
			{
				return this._xidofparent;
			}
			set
			{
				if ((this._xidofparent != value))
				{
					this.OnxidofparentChanging(value);
					this.SendPropertyChanging();
					this._xidofparent = value;
					this.SendPropertyChanged("xidofparent");
					this.OnxidofparentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_xtypeofparant", DbType="NVarChar(50)")]
		public string xtypeofparant
		{
			get
			{
				return this._xtypeofparant;
			}
			set
			{
				if ((this._xtypeofparant != value))
				{
					this.OnxtypeofparantChanging(value);
					this.SendPropertyChanging();
					this._xtypeofparant = value;
					this.SendPropertyChanged("xtypeofparant");
					this.OnxtypeofparantChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_xidtruble", DbType="Int")]
		public System.Nullable<int> xidtruble
		{
			get
			{
				return this._xidtruble;
			}
			set
			{
				if ((this._xidtruble != value))
				{
					this.OnxidtrubleChanging(value);
					this.SendPropertyChanging();
					this._xidtruble = value;
					this.SendPropertyChanged("xidtruble");
					this.OnxidtrubleChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
